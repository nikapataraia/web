simulate(): [gameinfo[], number, Array<Array<[number, number]>>] {
        const simulationresult: gameinfo[] = [];
        const sniperhits: Array<Array<[number, number]>> = [];
        console.log(this.fullinfo)
        while (this.rollsleft > 0) {
            const currentRollInfo: gameinfo = {};
            const actionDoers: pointsymbol[] = [];
            let specialSymbolGenerated = false;
    
            for (let reelIndex = 0; reelIndex < Object.keys(this.reelcontainer.reels).length; reelIndex++) {
                currentRollInfo[reelIndex] = {};
                for (let position = 0; position < 5; position++) {
                    if (this.fullinfo[reelIndex] && this.fullinfo[reelIndex][position]) {
                        continue;
                    }
    
                    const type = generateType();
                    if (type != 0) {
                        specialSymbolGenerated = true;
                        const value = generateWeightedNumber();
                        currentRollInfo[reelIndex][position] = [type, value];
                        if (type === 2 || type === 3 || type === 4) {
                            actionDoers.push(this.createSymbolInstance(type, value , [reelIndex,position]));
                        }
                    }
                }
            }
            Object.keys(currentRollInfo).forEach(reelIndex => {
                const reelIndexNum = parseInt(reelIndex);
                if (!this.fullinfo[reelIndexNum]) {
                    this.fullinfo[reelIndexNum] = {};
                }
                Object.keys(currentRollInfo[reelIndexNum]).forEach(position => {
                    const positionNum = parseInt(position);
                    this.fullinfo[reelIndexNum][positionNum] = currentRollInfo[reelIndexNum][positionNum];
                });
            });
    
            actionDoers.forEach(symbol => {
                if (symbol instanceof sniper) {
                    const hits = symbol.doAction(this.fullinfo ,[]);
                    sniperhits.push(hits);
                } else {
                    symbol.doAction(this.fullinfo,[]);
                }
            });
    
            if (!specialSymbolGenerated) {
                this.rollsleft -= 1;
            } else {
                this.rollsleft = 3;
            }
    
            simulationresult.push(currentRollInfo);
        }
    
        const totalPoints = this.calculatePoints();
        return [simulationresult, totalPoints, sniperhits];
    }